/**
 * IDL description of the ExpectationMaximizationModule
 *
 * This file is automatically parsed by the rurbuilder backends for the omniidl 
 * compiler. The names of the functions will become port identifiers. The names 
 * of the function variables are not used. For now, if the function variable 
 * ends with a number, like "void Sensor(in long input2);" there will be two
 * portnames created.
 *
 * Author: 
 * Copyright: 
 * Date: 
 * License: 
 */

// Recommended namespace "rur"
module rur {

// The command-line parameters
struct Param {
	// multiple modules can be addressed in parallel, killed, etc. using "module_id"
	string module_id;
	// a certain parameter over the command-line (long becomes int) 
	long parameter;
};

// Typedef for array of integers
typedef sequence<long> long_seq;
typedef sequence<float> float_seq;

// We want to be able to give our class a name
interface ExpectationMaximizationModule {

	// Input sample
	void Sample(in float_seq input);
	
	// Send 1 to train the model
	void Train(in long input);

	// When the gmm is trained, the means, weights and covariance matrices are returned
	void Model(out float_seq output);

	// Sample that should be classified, first number is sample ID, result will be written back
	void Classify(in float_seq input);

	// Classified sample, first number is sample ID, following are probabilities of each class
	void Classified(out float_seq output);
	
	// Get and set parameters, defined somewhere
	void GetParameters(out float_seq output);
	void SetParameters(in float_seq input);
};

};
